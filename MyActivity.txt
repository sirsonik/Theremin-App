package edu.ucla.tanms.tanmstheremin;

import android.app.Activity;
import android.app.Fragment;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioTrack;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.content.Intent;
import java.util.Random;


public class MyActivity extends Activity {

    private static int maxX, maxY;
    private static double volume, freq;
    tonebox theremin;

    /** Called when the user clicks a button */
    public void SingleTouchActivity(View view) {
        Intent intent = new Intent(this, SingleTouchActivity.class);
        startActivity(intent);
    }

    public void SingleTouchPlusActivity(View view) {
        Intent intent = new Intent(this, SingleTouchPlusActivity.class);
        startActivity(intent);
    }

    public void DualTouchActivity(View view) {
        Intent intent = new Intent(this, DualTouchActivity.class);
        startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        setContentView(R.layout.activity_my);
        if (savedInstanceState == null) {
            getFragmentManager().beginTransaction()
                    .add(R.id.container, new PlaceholderFragment())
                    .commit();
        }

        //get display size
        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);

        maxX = metrics.heightPixels;
        maxY = metrics.widthPixels;

        //start the audio thread
        theremin = new tonebox();
        theremin.execute();

    }

    /**
     * A placeholder fragment containing a simple view.
     */
    public static class PlaceholderFragment extends Fragment {

        public PlaceholderFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_my, container, false);
            return rootView;
        }
    }

    //functions for returning values
    public static int getMaxX() {
        return maxX;
    }

    public static int getMaxY() {
        return maxY;
    }

    public static void setVolume(double val) {
        volume = val;
    }

    public static void setFreq(double val) {
        freq = val;
    }

    //modified tonebox code, courtesy of http://www.bongo.net/theremin/AndroidSound.htm
    private class tonebox extends AsyncTask<Void, Void, Void> {

        // If you change this, then you will have to adjust some of the
        // other cyclic factors as well, notably warble. Sample length
        // makes for more nimble tone changes.
        public int sampleLength = 64;
        // This is the frequency max. Most examples show 44100, but this
        // only invites static. We never climb above about 3000 so this
        // could even be set lower.
        public int freqRange = 11025;

        // 1 to maxTones independent tones
        public int maxTones = 6;
        private int howl = 1;

        AudioTrack Track;

        protected Void doInBackground(Void... params) {
            volume = 0; //start with no volume

            short samples[] = new short[sampleLength];
            double freqBase[] = new double[maxTones];
            int freqTrack[] = new int[maxTones];
            int freqVector[] = new int[maxTones];
            double angle[] = new double[maxTones];
            double collectedAngle;

            Random gen = new Random();

            // set up audio Track and start it
            int minSize = AudioTrack.getMinBufferSize(

                    freqRange, AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT);

            Track = new AudioTrack(AudioManager.STREAM_MUSIC, freqRange,

                    AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT,
                    minSize, AudioTrack.MODE_STREAM);

            Track.play();
            while(true) {

                freqBase[0] = freq;

                // append any additional harmonics
                for (int i = 1; i < howl; i++) {

                    freqVector[i] += gen.nextInt(3) - 1;
                    if (Math.abs(freqVector[i]) > 6) freqVector[i] = (int) (freqVector[i] / 2);
                    freqTrack[i] += freqVector[i];
                    if (Math.abs(freqTrack[i]) > 100) freqVector[i] = -freqVector[i];
                    freqBase[i] = freqBase[0] + freqTrack[i];

                }

                // fill sample
                for (int i = 0; i < sampleLength; i++) {

                    collectedAngle = 0;

                    // compute base tone and then append any additional
                    for (int j = 0; j < howl; j++) {

                        angle[j] += 2 * Math.PI * freqBase[j] / freqRange;
                        if (angle[j] > (2 * Math.PI))

                            angle[j] -= (2 * Math.PI);


                        collectedAngle += Math.sin(angle[j]);

                    }

                    //adjust the volume
                    samples[i] = (short) ((collectedAngle / howl) * Short.MAX_VALUE * volume);

                }


                // shove the sample into the stream
                Track.write(samples, 0, sampleLength);
            }
        }
    }
}
